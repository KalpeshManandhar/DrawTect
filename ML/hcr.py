# -*- coding: utf-8 -*-
"""HCR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CPPg4_VzJ5934-XRXBfi5HaTKX4ClSOU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

# import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D,BatchNormalization
from keras.utils import to_categorical
import sklearn.metrics as metrics

train=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/emnist-letters-train.csv')
test=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/emnist-letters-train.csv')
# mapp=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/emnist-letters-mapping.txt',delimiter=' ',index_col=0,header=None,squeeze=True)
classLabel = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabdefghnqrt'

HEIGHT=28
WIDTH=28

trainX=train.iloc[:,1:]
trainY=test.iloc[:,0]
del train

testX=test.iloc[:,1:]
testY=test.iloc[:,0]
del test

def testPrint(X,Y,rotated=False,index=None):
  indexes=X.shape[0]
  rng = np.random.default_rng()
  randindex = rng.integers(indexes, size=1)[0] if index==None else index
  temp= X.reshape(X.shape[0], 28, 28) if rotated==False else X
  plt.imshow(temp[randindex], cmap='gray')
  plt.axis('off')
  plt.show()
  print("Class value:",trainY[randindex])
  print("Label:", classLabel[trainY[randindex]-1])
  del temp
  return randindex

print(trainX.shape)
trainX=np.asarray(trainX)
testX=np.asarray(testX)
print(testPrint(trainX,trainY))

def rotate(image):
  image=image.reshape(HEIGHT,WIDTH)
  image=np.fliplr(image)
  image=np.rot90(image)
  return image

trainX=np.apply_along_axis(rotate,1,trainX)
testX=np.apply_along_axis(rotate,1,testX)

print(testPrint(trainX,trainY,rotated=True))
print(trainX.shape)

# Normalize
trainX=trainX.astype('float32')
trainX/=255
testX=testX.astype('float32')
testX/=255

classes=trainY.nunique()
print(classes)
trainY=to_categorical(trainY,len(classLabel))
testY=to_categorical(testY,len(classLabel))
print(trainY.shape,testY.shape)

print(trainX.shape,testX.shape)
#Reshaping for CNN
trainX=trainX.reshape(-1,HEIGHT,WIDTH,1)
testX=testX.reshape(-1,HEIGHT,WIDTH,1)
print(trainX.shape,testX.shape)

# Building model
model = Sequential()

model.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape=(HEIGHT,WIDTH, 1)))
model.add(BatchNormalization())
model.add(Conv2D(32, kernel_size = 3, activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.4))

model.add(Conv2D(64, kernel_size = 3, activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(64, kernel_size = 3, activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.4))

model.add(Conv2D(128, kernel_size = 4, activation='relu'))
model.add(BatchNormalization())
model.add(Flatten())
model.add(Dropout(0.4))
model.add(Dense(units=len(classLabel), activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

def plot_history(history):
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    loss = history.history['loss']
    val_loss = history.history['val_loss']

    epochs = range(1, len(acc) + 1)

    # "bo" is for "blue dot"
    plt.plot(epochs, loss, 'ro', label='Training loss')
    plt.plot(epochs, acc, 'g', label='Training accuracy')
    # b is for "solid blue line"
    plt.plot(epochs, val_loss, 'r', label='Validation loss')
    plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
    plt.title('Training and validation loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()

    plt.show()

batchSize=128
history = model.fit(trainX, trainY,batch_size = batchSize,epochs = 15,validation_split = 0.1)

plot_history(history)
result = model.evaluate(testX, testY)
print("The accuracy of the model is: ",result[1])

model.save('htrNormalized3.h5')

from tensorflow.keras.models import load_model
model=load_model('htrNormalized23.h5')
print(trainX[82264].shape)

indexes=testX.shape[0]
rng = np.random.default_rng()
randindex = rng.integers(indexes, size=1)[0]
plt.imshow(testX[randindex], cmap='gray')
plt.axis('off')
plt.show()

temp=testX[randindex]
temp=temp.reshape(1,28,28,1)
pred=model.predict(temp)
pred=(np.argmax(pred)-1)
pred_s=classLabel[pred]
print(pred_s)